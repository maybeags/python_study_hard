'''
chapter11_class_and_static
main

1. 클래스 변수

    인스턴스 변수 : 인스턴스마다 서로 다른 값을 지니는 변수
    클래스 변수 : 모든 인스턴스가 동일한 값을 지니는 변수

    인스턴스 변수 :
        목적 - 인스턴스마다 서로 다른 값을 저장
        접근 방식 - 인스턴스 접근(o)
                - 클래스 접근(x)

    클래스 변수 :
        목적 - 인스턴스가 공유하는 값을 저장
        접근 방식 - 인스턴스 접근(o)
                - 클래스 접근(o)
'''
# 클래스 변수 예제
# class Korean:
#     country = "한국"
#     # 인스턴스 변수의 경우 생성자 내부에 있었습니다. 클래스 변수의 경우에는 이상처럼
#     # 클래스 내부에 그냥 선언하고 초기화하면 됩니다.
#
#     def __init__(self, name, age, address):
#         self.name = name                # 인스턴스 변수 1
#         self.age = age                  # 인스턴스 변수 2
#         self.address = address          # 인스턴스 변수 3
#
# # 객체 생성
# man = Korean(name="안근수", age=38, address="부산광역시 연제구")   # keyword argument
# print(man.name)     # 객체의 속성 확인 방법
# print(man.age)     # 객체의 속성 확인 방법
# print(man.address)     # 객체의 속성 확인 방법 -> 셋 다 인스턴스 변수 확인
# # 클래스 변수 확인 방법
# print(man.country)      # 객체명.클래스변수명을 통한 접근 : 가능
# print(Korean.country)   # 클래스명.클래스변수명을 통한 접근 : 가능

# 객체명.클래스변수를 통해서 클래스 변수에 접근이 가능하긴 하지만 클래스 내부의 코드를
# 들여다보기 전까지는 country라는 변수가 클래스 변수인지 인스턴스 변수인지 확인이
# 불가능하다는 문제가 있습니다.

# 이상을 이유로 클래스 변수를 확인하고자 할 때는 객체명.클래스변수명으로 참조하기 보다는
# 클래스명.클래스변수명을 통해서 참조하는 것이 바람직합니다.
'''
클래스 메서드 : 클래스 변수를 사용하는 메서드
'''
class Korean2:
    country = "대한민국"        # 클래스 변수 선언 및 초기화

    # 클래스 메서드 정의 법
    @classmethod                # 얘를 명시하면 밑의 코드가 클래스 메서드로 작성됨
    def trip(cls, travelling_site): # 그 결과 첫 번째 매개변수로 self가 아니라 cls가 자동완성
        if cls.country == travelling_site:
            print("국내 여행입니다.")
        else:
            print("해외 여행입니다.")


# 클래스 메서드의 호출
Korean2.trip("대한민국")
Korean2.trip("미국")
# 객체를 여기서 생성
man2 = Korean2()
man2.trip("일본")
# 클래스 변수 때와 마찬가지로 객체명.클래스메서드명()으로 호출 가능
#-> 하지만 마찬가지로 얘가 인스턴스 메서드인지 클래스 메서드인지 구분할 수 없기 때문에
#권장되는 코드 작성 요령이 아닙니다.
'''
2. 클래스 메서드
    : 클래스 변수를 사용하는 메서드
    
    특징 :
        1) 인스턴스 또는 클래스로 호출 -> 하지만 클래스 변수와 마찬가지로 클래스로 호출하는 것이 권장
        2) 생성된 인스턴스가 없어도 호출 가능(클래스로 호출 가능하니까)
        3) @classmethod 데코레이터(decorator)를 표시하고 작성
        4) 매개변수 self를 쓰지 않고 cls를 사용 -> self는 객체를 의미하기 때문(즉 self는 인스턴스에 사용함)
        
    호출 방식 :
        클래스명.메서드명() -> self를 사용하지 않기 때문에 '인스턴스 변수에 접근이 불가능',
            cls를 통해 클래스 변수에만 접근 가능
            
Korean2 클래스에서 정의된 trip() 메서드는 클래스 메서드임을 알리는 @classmethod로 시작,
첫 번째 매개변수인 cls는 class의 축약어에 해당. 여기서는 클래스 Korean2를 의미함.
따라서 내부의 cls.country는 Korean2.country와 동일한 의미. 이를 클래스 내부에서는 cls.country로 표기
클래스 메서드는 인스턴스를 생성하지 않아도 클래스만으로 호출 가능. 즉 Korean2.trip(argument)로 호출 가능

3. 정적 메서드(static method)
    : 정적 메서드 또한 self를 사용하지 않음 -> 즉, 인스턴스 변수에 접근하여 사용하는 것이 불가능함을 의미.
        - 클래스 메서드와의 공통점 # 1
    인스턴스를 생성하지 않아도 사용할 수 있음 -> 클래스 메서드와의 공통점 # 2
    
    특징 :
        1) 인스턴스 또는 클래스로 호출 가능 -> 클래스 메서드와의 공통점
        2) 생성된 인스턴스가 없어도 호출 가능 -> 클래스 메서드와의 공통점
        3) @staticmethod 데코레이터를 표기하고 작성 -> 클래스 메서드와의 차이점 # 1
        4) 반드시 작성해야 할 매개변수(self, cls)가 없음 -> 클래스 메서드와의 차이점 # 2
        
정적 메서드는 self, cls를 다 사용하지 않기 때문에 인스턴스 / 클래스 변수를 모두 사용하지 않는 메서드를
저으이하는 경우에 적합함. 정적 메서드는 클래스에 소속돼있지만 인스턴스에는 영향을 주지도 않고,
또한 영향을 받지도 않음.
'''
class Korean3:
    country = "한국"      # 클래스 변수

    @staticmethod       # 정적 메서드 선언
    def slogan():           # self, cls가 자동 생성되지 않았습니다 -> 인스턴스/클래스 변수 참조 안하니까
        print("Imagine Your Korea!🎈")

    @staticmethod       # 동일한 교재 예시를 call2() 유형으로 정의해봤습니다.
    def slogan2(str_example):
        print("Imagine Your Korea!🎈" + str_example)

Korean3.slogan()
Korean3.slogan2("근데 너무 춥다")